import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CurrencyServiceTest {

    @Mock
    private Marshaller marshaller;

    @InjectMocks
    private CurrencyService currencyService; // Assuming your method is inside a service class

    private InputStream mockInputStream;
    private CurrencyRoot mockCurrencyRoot;
    private KDEVIDETCURRLIST mockCurrList;
    private KDEVIDETLINKCOUNTRYCURRENCYLIST mockCtrycurrList;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this); // Initialize mocks

        // Initialize mock objects
        mockInputStream = mock(InputStream.class);
        mockCurrencyRoot = mock(CurrencyRoot.class); // Mock CurrencyRoot object
        mockCurrList = mock(KDEVIDETCURRLIST.class); // Mock KDEVIDETCURRLIST object
        mockCtrycurrList = mock(KDEVIDETLINKCOUNTRYCURRENCYLIST.class); // Mock KDEVIDETLINKCOUNTRYCURRENCYLIST object

        // Mock the marshaller to return the CurrencyRoot object
        when(marshaller.unmarshalCurrencyRoot(mockInputStream)).thenReturn(mockCurrencyRoot);

        // Set up the mockCurrList and mockCtrycurrList objects
        List<KDEVIDETCURR> currencyDetails = new ArrayList<>();
        currencyDetails.add(new KDEVIDETCURR("USD", "US Dollar", "Dollars"));
        when(mockCurrList.getCurrencyDetail()).thenReturn(currencyDetails);

        List<KDEVIDETLINKCOUNTRYCURRENCY> ctryCcyLinks = new ArrayList<>();
        ctryCcyLinks.add(new KDEVIDETLINKCOUNTRYCURRENCY("USA", "USD"));
        when(mockCtrycurrList.getCtryCcyLink()).thenReturn(ctryCcyLinks);

        // Ensure that the mockCurrencyRoot returns these non-null objects
        when(mockCurrencyRoot.getCurrList()).thenReturn(mockCurrList);
        when(mockCurrencyRoot.getCtrycurrList()).thenReturn(mockCtrycurrList);
    }

    @Test
    public void testGetCurrencyDetailsFromERECA_Success() {
        // Call the method to be tested
        CountryCurrencyDTO result = currencyService.getCurrencyDetailsFromERECA(mockInputStream);

        // Assert that the result is not null
        assertNotNull(result);

        // Verify that the CurrencyDTO and CtryCcyDTO objects are not null
        assertNotNull(result.getCurrencyDTO());
        assertNotNull(result.getCtryCcydto());

        // Verify that marshaller was called once
        verify(marshaller, times(1)).unmarshalCurrencyRoot(mockInputStream);

        // Verify that the currency details and country-currency links were mapped correctly
        assertFalse(result.getCurrencyDTO().getCurrencyList().isEmpty());
        assertFalse(result.getCtryCcydto().getCtryCcyList().isEmpty());
    }

    @Test
    public void testGetCurrencyDetailsFromERECA_EmptyLists() {
        // Modify behavior to return empty lists for KDEVIDETCURRLIST and KDEVIDETLINKCOUNTRYCURRENCYLIST
        when(mockCurrList.getCurrencyDetail()).thenReturn(new ArrayList<>());
        when(mockCtrycurrList.getCtryCcyLink()).thenReturn(new ArrayList<>());

        // Call the method
        CountryCurrencyDTO result = currencyService.getCurrencyDetailsFromERECA(mockInputStream);

        // Assert that the result is not null
        assertNotNull(result);

        // Assert that the CurrencyDTO and CtryCcyDTO lists are empty
        assertTrue(result.getCurrencyDTO().getCurrencyList().isEmpty());
        assertTrue(result.getCtryCcydto().getCtryCcyList().isEmpty());

        // Verify that marshaller was called once
        verify(marshaller, times(1)).unmarshalCurrencyRoot(mockInputStream);
    }

    @Test
    public void testGetCurrencyDetailsFromERECA_NullRoot() {
        // Mock the marshaller to return null (simulating an unmarshalling failure)
        when(marshaller.unmarshalCurrencyRoot(mockInputStream)).thenReturn(null);

        // Call the method and expect an IllegalArgumentException
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            currencyService.getCurrencyDetailsFromERECA(mockInputStream);
        });

        // Optionally check the exception message
        assertEquals("CurrencyRoot is null after unmarshalling.", exception.getMessage());
    }
}
