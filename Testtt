import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;

@RunWith(MockitoJUnitRunner.class)
public class HolidayDataServiceImplTest {

    @Mock
    private WebClient holidayWebClient;

    @Mock
    private WebClient.RequestHeadersUriSpec<?> requestHeadersUriSpec;  // IMPORTANT: Use wildcard '?'

    @Mock
    private WebClient.RequestHeadersSpec<?> requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    @InjectMocks
    private HolidayDataServiceImpl holidayDataService;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);  // Initialize mocks
    }

    @Test
    public void getHolidayforCurrency_ShouldReturnListOfHolidays() {
        // Arrange
        String currencyCode = "USD";
        String startDate = LocalDate.now().toString();
        String endDate = LocalDate.now().withDayOfYear(365).toString();

        HolidayDTO mockHolidayDTO = new HolidayDTO();
        mockHolidayDTO.setHolidayList(Arrays.asList("2023-12-25", "2024-01-01"));

        // Mock the WebClient chain
        when(holidayWebClient.get()).thenReturn(requestHeadersUriSpec);

        // Mock the `uri()` function properly
        when(requestHeadersUriSpec.uri(any(Function.class))).thenReturn(requestHeadersSpec);  // Fixing uri() mock

        // Mock the remaining WebClient calls
        when(requestHeadersSpec.accept(MediaType.APPLICATION_JSON)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(HolidayDTO.class)).thenReturn(Mono.just(mockHolidayDTO));

        // Act
        List<Holiday> result = holidayDataService.getHolidayforCurrency(currencyCode);

        // Assert
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("2023-12-25", result.get(0).getDate());
        assertEquals("USD", result.get(0).getCurrencyCode());
    }
}
