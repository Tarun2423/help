import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClient.RequestHeadersUriSpec;
import org.springframework.web.reactive.function.client.WebClient.RequestHeadersSpec;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;
import reactor.core.publisher.Mono;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(MockitoJUnitRunner.class)
public class HolidayDataServiceImplTest {

    @Mock
    private WebClient holidayWebClient;

    @Mock
    private WebClient.RequestHeadersUriSpec requestHeadersUriSpec;

    @Mock
    private WebClient.RequestHeadersSpec requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    @InjectMocks
    private HolidayDataServiceImpl holidayDataService;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);  // Initialize mocks if not using MockitoJUnitRunner
    }

    @Test
    public void getHolidayforCurrency_ShouldReturnListOfHolidays() {
        // Arrange
        String currencyCode = "USD";
        String startDate = LocalDate.now().toString();
        String endDate = LocalDate.now().withYear(LocalDate.now().getYear()).withDayOfYear(365).toString();
        
        // Mocking the response from WebClient
        HolidayDTO mockHolidayDTO = new HolidayDTO();
        mockHolidayDTO.setHolidayList(Arrays.asList("2023-12-25", "2024-01-01"));

        when(holidayWebClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.accept(MediaType.APPLICATION_JSON)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(HolidayDTO.class)).thenReturn(Mono.just(mockHolidayDTO));

        // Act
        List<Holiday> result = holidayDataService.getHolidayforCurrency(currencyCode);

        // Assert
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("2023-12-25", result.get(0).getDate());
        assertEquals("USD", result.get(0).getCurrencyCode());
    }

    @Test
    public void getHolidayforCurrency_ShouldHandleEmptyList() {
        // Arrange
        String currencyCode = "USD";
        
        // Mocking an empty list in response
        HolidayDTO mockHolidayDTO = new HolidayDTO();
        mockHolidayDTO.setHolidayList(Collections.emptyList());

        when(holidayWebClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.accept(MediaType.APPLICATION_JSON)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(HolidayDTO.class)).thenReturn(Mono.just(mockHolidayDTO));

        // Act
        List<Holiday> result = holidayDataService.getHolidayforCurrency(currencyCode);

        // Assert
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    public void getHolidayforCurrency_ShouldHandleNullHolidayList() {
        // Arrange
        String currencyCode = "USD";

        // Mocking a null holiday list in response
        HolidayDTO mockHolidayDTO = new HolidayDTO();
        mockHolidayDTO.setHolidayList(null);

        when(holidayWebClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(any())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.accept(MediaType.APPLICATION_JSON)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(HolidayDTO.class)).thenReturn(Mono.just(mockHolidayDTO));

        // Act
        List<Holiday> result = holidayDataService.getHolidayforCurrency(currencyCode);

        // Assert
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }
}
