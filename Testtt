import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.time.LocalDate;
import java.util.List;

public class HolidayDataServiceImplTest {

    @Mock
    private WebClient holidayWebClient;

    @Mock
    private WebClient.RequestHeadersSpec<?> requestHeadersSpec;

    @Mock
    private WebClient.ResponseSpec responseSpec;

    @InjectMocks
    private HolidayDataServiceImpl holidayDataService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetHolidayForCurrency() {
        // Arrange
        String currencyCode = "USD";
        LocalDate now = LocalDate.now();
        String startDate = now.toString();
        String endDate = now.withDayOfYear(now.lengthOfYear()).toString();
        
        HolidayDTO mockHolidayDTO = new HolidayDTO();
        mockHolidayDTO.setHolidayList(List.of("2024-01-01", "2024-12-25"));

        when(holidayWebClient.get()).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.uri(uriBuilder -> uriBuilder.path("/bankHolidays")
                .queryParam("startDate", startDate)
                .queryParam("endDate", endDate)
                .queryParam("currencyCode", currencyCode)
                .build())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.accept(MediaType.APPLICATION_JSON)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(HolidayDTO.class)).thenReturn(Mono.just(mockHolidayDTO));

        // Act
        List<Holiday> holidays = holidayDataService.getHolidayForCurrency(currencyCode);

        // Assert
        assertNotNull(holidays);
        assertEquals(2, holidays.size());
        assertEquals("2024-01-01", holidays.get(0).getDate());
        assertEquals(currencyCode, holidays.get(0).getCurrencyCode());
    }

    @Test
    void testGetHolidayForCurrencyNoHolidays() {
        // Arrange
        String currencyCode = "USD";
        LocalDate now = LocalDate.now();
        String startDate = now.toString();
        String endDate = now.withDayOfYear(now.lengthOfYear()).toString();
        
        HolidayDTO mockHolidayDTO = new HolidayDTO();
        mockHolidayDTO.setHolidayList(List.of());

        when(holidayWebClient.get()).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.uri(uriBuilder -> uriBuilder.path("/bankHolidays")
                .queryParam("startDate", startDate)
                .queryParam("endDate", endDate)
                .queryParam("currencyCode", currencyCode)
                .build())).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.accept(MediaType.APPLICATION_JSON)).thenReturn(requestHeadersSpec);
        when(requestHeadersSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.bodyToMono(HolidayDTO.class)).thenReturn(Mono.just(mockHolidayDTO));

        // Act
        List<Holiday> holidays = holidayDataService.getHolidayForCurrency(currencyCode);

        // Assert
        assertNotNull(holidays);
        assertTrue(holidays.isEmpty());
    }
}
