@Test
public void validatePaymentTest() throws Exception {
    // Prepare request body from a test JSON file
    String requestBody = new String(Files.readAllBytes(Paths.get("arc/test/resources/PaymentMessage.json")));

    // Mock BearerTokenAuthentication with token attributes
    BearerTokenAuthentication mockAuthentication = Mockito.mock(BearerTokenAuthentication.class);
    
    // Mock the scope attribute inside the token attributes
    Map<String, Object> tokenAttributes = new HashMap<>();
    tokenAttributes.put("scope", Arrays.asList("api.currency-guide.v1"));
    
    // Set the mocked token attributes in the authentication object
    Mockito.when(mockAuthentication.getTokenAttributes()).thenReturn(tokenAttributes);

    // Mock the SecurityContext to use our mockAuthentication
    SecurityContext securityContext = Mockito.mock(SecurityContext.class);
    Mockito.when(securityContext.getAuthentication()).thenReturn(mockAuthentication);
    
    // Set the SecurityContext in the SecurityContextHolder
    SecurityContextHolder.setContext(securityContext);

    // Mock service layer method behavior
    Mockito.when(paymentValidationSA.getPaymentStatusforPCM(Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
           .thenReturn(new ValidationResult(StatusEnum.OK, null));

    // Perform the request and verify the response
    mockMvc.perform(MockMvcRequestBuilders.post("/api/v1/payment-validation")
            .param("originationCountryCode", "ABC")
            .param("currencyCode", "ASD")
            .param("destinationCountryCode", "SFD")
            .header("X-Request-Id", "DRFOERTOPUUD")
            .content(requestBody)
            .contentType(MediaType.APPLICATION_JSON))
            .andDo(print())
            .andExpect(status().isOk())
            .andExpect(content().json("{\"status\":\"OK\", \"reasons\": null}"));
}
