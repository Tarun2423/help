import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;
import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;
import software.amazon.awssdk.services.s3.model.S3Object;
import software.amazon.awssdk.services.s3.model.DeleteObjectRequest;

import java.io.IOException;
import java.util.Comparator;
import java.util.List;

public void deleteOldFilesKeepLatest(String folderPath) throws IOException {
    // List all files in the folder
    ListObjectsV2Request listObjectsRequest = ListObjectsV2Request.builder()
        .bucket(s3Configuration.getBucketname()) // S3 bucket name
        .prefix(folderPath) // Folder path
        .build();

    ListObjectsV2Response listObjectsResponse = s3.listObjectsV2(listObjectsRequest);
    List<S3Object> s3Objects = listObjectsResponse.contents();

    // If no files are found, return early
    if (s3Objects.isEmpty()) {
        System.out.println("No files found in the folder.");
        return;
    }

    // Sort the files by last modified timestamp (you can also sort by key if the timestamp is in the key)
    s3Objects.sort(Comparator.comparing(S3Object::lastModified).reversed());

    // Keep the latest file (first in the list after sorting)
    S3Object latestFile = s3Objects.get(0);
    System.out.println("Latest file to keep: " + latestFile.key());

    // Delete all other files except the latest one
    for (int i = 1; i < s3Objects.size(); i++) {
        String fileKey = s3Objects.get(i).key();
        DeleteObjectRequest deleteObjectRequest = DeleteObjectRequest.builder()
            .bucket(s3Configuration.getBucketname())
            .key(fileKey)
            .build();

        // Delete the file
        s3.deleteObject(deleteObjectRequest);
        System.out.println("Deleted file: " + fileKey);
    }
}
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Collections;
import java.util.Optional;

import static org.mockito.Mockito.*;

public class PurposeCodeValidationTest {

    private CountryRepository countryRepository;
    private Sheet datatypeSheet;

    @BeforeEach
    public void setup() {
        countryRepository = Mockito.mock(CountryRepository.class);
        datatypeSheet = Mockito.mock(Sheet.class);
    }

    @Test
    public void testProcessPurposeCodeValidationSheet() {
        // Mocking the sheet and rows
        Row row1 = mock(Row.class);
        when(row1.getCell(1)).thenReturn(createCell("USA"));
        when(row1.getCell(2)).thenReturn(createCell("Purpose1"));

        Row row2 = mock(Row.class);
        when(row2.getCell(1)).thenReturn(createCell("USA"));
        when(row2.getCell(2)).thenReturn(createCell("Purpose2"));

        when(datatypeSheet.getLastRowNum()).thenReturn(2);
        when(datatypeSheet.getRow(1)).thenReturn(row1);
        when(datatypeSheet.getRow(2)).thenReturn(row2);

        Country country = new Country();
        when(countryRepository.findById("USA")).thenReturn(Optional.of(country));

        // Call the method
        processPurposeCodeValidationSheet(datatypeSheet, countryRepository);

        // Verify the country object was updated
        verify(countryRepository).save(country);
        assertEquals(Set.of("Purpose1", "Purpose2"), country.getPurposeCodeList());
    }

    private org.apache.poi.ss.usermodel.Cell createCell(String value) {
        org.apache.poi.ss.usermodel.Cell cell = mock(org.apache.poi.ss.usermodel.Cell.class);
        when(cell.getStringCellValue()).thenReturn(value);
        return cell;
    }
}
